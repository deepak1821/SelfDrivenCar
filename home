import React, { useEffect, useRef, useState } from 'react';
import * as d3 from 'd3';
import axios from 'axios';
import TreeRoot from '../../assets/Tree-root.png';
import KeywordDialog from '../../components/ProblemSolving/KeywordDialog/KeywordDialog';
import KeywordSearch from '../../components/ProblemSolving/KeywordSearch/KeywordSearch';
import ControlPointOutlinedIcon from '@mui/icons-material/ControlPointOutlined';
import RemoveCircleOutlineOutlinedIcon from '@mui/icons-material/RemoveCircleOutlineOutlined';
import './ProblemList.css';

let redMulberry = '#C0392B',
    red = '#E74C3C',
    lightPink = '#9B59B6',
    darkPink = '#8E44AD',
    parrotGreen = '#3498DB',
    blueMariner = '#2980B9',
    blueCurious = '#3498DB',
    brightCyan = '#1ABC9C',
    shadeGreenCyan = '#16A085',
    green = '#27AE60',
    lightGreen = '#2ECC71',
    shadeYellow = '#F1C40F',
    greatLightOrange = '#F39C12',
    lightOrange = '#E67E22',
    burntOrange = '#D35400',
    silverSand = '#BDC3C7',
    concrete = '#95A5A6',
    osloGrey = '#7F8C8D',
    darkBlue = '#34495E',
    aqua = '#51f3d4',
    pulpyOrange = '#f87770',
    blue = '#7f70f6',
    yellow = '#fadf44'

let colors = [redMulberry, red, lightPink, darkPink, parrotGreen, blueMariner, blueCurious, brightCyan, shadeGreenCyan, green, lightGreen, shadeYellow, greatLightOrange, lightOrange, burntOrange, silverSand, concrete, osloGrey, darkBlue, aqua, pulpyOrange, blue, yellow];

let childDate = (data, color) => {
    let chi = (data) => {
        return data.map(li => {
            return {
                ...li,
                color: color,
                ...(li.children && { children: chi(li.children) })
            }
        })
    }
    return chi(data);
}

let updateDate = (treeData) => treeData.children.map((list, i) => {
    let color = colors[i]
    return {
        ...list,
        color,
        children: childDate(list.children, color)
    }
})

const ProblemList = ({ selectedData, selectData }) => {

    const [selectedProblemList, setSelectedProblemList] = useState<string[]>([]);
    const [showKeywordDialog, setShowKeywordDialog] = useState(false);
    const [actionTooltipXaxis, setActionTooltipXaxis] = useState<string>('0px');
    const [actionTooltipYaxis, setActionTooltipYaxis] = useState<string>('0px');
    const [selectedProblem, setSelectedProblem] = useState('');
    const [ treeData, setTreeDate ] = useState<any>({ });
    const [searchedProblemsList, setSearchedProblemsList] = useState<string[]>([]);

    const svgRef = useRef(null);

    useEffect(() => {
        getTreeData();
    }, [])

     const getTreeData = async () => {
        try {
            let data = {
                inputFileLocation : ["telecom","segmentation_churn_analysis","telecom_company_customer_churn"]
            }
            const response = await axios.post(`businessVerticalTree/data/ ${selectedData.industry.heading}`, data)
            const res = {
                ...response.data,
                children : updateDate(response.data)
            };
            setTreeDate(res);
        } catch (error) {
            console.log(error);
        }
      };

    useEffect(() => {
        if(selectedData.problemList.length > 0) {
            setSelectedProblemList(selectedData.problemList)
        }
        return () => d3.selectAll("g").remove()
    }, [])

    useEffect(() => {
        renderTree();
    }, [treeData]);

    useEffect(() => {
        d3.selectAll("g").remove()
        renderTree();
    }, [searchedProblemsList, selectedProblemList])

    const renderTree = () => {
        if(treeData?.children?.length > 0) {
            // Specify the chartâ€™s dimensions.
            const width = 920;
            const height = width;
            const cx = width * 0.5; // adjust as needed to fit
            const cy = height * 0.5; // adjust as needed to fit


            // Create the SVG container
            const svg = d3.select(svgRef.current)
            .attr('width', width)
            .attr('height', height)
            .attr("viewBox", [-cx, -cy, width, height])
            .attr("style", "width: 100%; height: auto; font: 8px sans-serif;")
            // .call(
            //     d3.drag()
            //     .on('start', d => {
            //         console.log('start', svg.selectAll('path'))
            //     })
            //     .on('drag', d => {
            //         console.log('drag', svg.selectAll('path'))
            //     })
            //     .on('end', d => {
            //         console.log('end', svg.selectAll('path'))
            //     })
            // )

            // Create a hierarchy from the data
            const root = d3.hierarchy(treeData);

            // Create a cluster layout
            const cluster = d3.cluster()
            .size([360, width / 2 - 200])
            .separation((a, b) => (a.parent == b.parent ? 1 : 2) / a.depth); // Adjust the radius of the chart

            // Assign positions to the nodes
            cluster(root.sort((a, b) => d3.ascending(a.data.name, b.data.name)));

            // Create the links
            svg.selectAll('.link')
            .data(root.descendants().slice(1))
            .enter()
            .append('path')
            .attr('class', 'link')
            .attr('d', d => {
                return `M${project(d.x, d.y)}C${project(d.x, (d.y + d.parent.y) / 2)} ${project(
                d.parent.x,
                (d.y + d.parent.y) / 2
                )} ${project(d.parent.x, d.parent.y)}`;
            })
            .style('fill', 'none')
            .style('stroke', d => d.data.color) // Adjust the color of the links
            .attr("stroke-width", 2)

            // Create the nodes
            const nodes = svg.selectAll('.node')
            .data(root.descendants())
            .enter()
            .append('g')
            .attr('class', 'node')
            .attr('transform', d => `rotate(${d.x - 90}) translate(${d.y})`)

            nodes.filter(function(d) {
                return d.depth == 0;
            }).append("image")
            .attr("xlink:href", TreeRoot)
            .attr("x", -40)
            .attr("y", -10)
            // .attr('transform', d => `rotate(${d.x + 104}) translate(${d.y})`);

            // Append circles to the nodes
            nodes.filter(function(d) {
                return d.depth !== 0;
            })
            .append('circle')
            .style('fill', d => selectedProblemList.includes(d.data.name)? d.data.color : '#fff') // Adjust the color of the nodes
            .style('stroke', d => d.data.color)
            .style('stroke-width', 2)
            .style('cursor', 'pointer')
            .attr('r', d => d.children ? null : 6)
            .on("mouseover", (d, item) => {
                if(item.depth > 1) {
                    setSelectedProblem(item.data.name);
                    d3.select("#actionTooltip").style("display", 'flex')
                    setActionTooltipXaxis(d.offsetX + "px")
                    setActionTooltipYaxis(d.offsetY + "px")
                }
            })
            .on("mouseleave", function (d) {
                d3.select("#actionTooltip").style("display", 'none')
            })

            // Append text labels to the nodes
            nodes.append('text')
            .attr('dy', '.31em')
            .attr("dx", d => d.x < 180 ? 8 : -8)
            .attr('text-anchor', d => (d.x < 180 ? 'start' : 'end'))
            .attr("paint-order", "stroke")
            .attr("stroke", "white")
            .attr("fill", "currentColor")
            .attr("text-anchor", d => d.x < 180 ? "start" : "end")
            .attr("transform", d => d.x < 180 ? null : "rotate(180)")
            .text(d => d.depth !== 0 ? d.data.name : null)
            .attr('id', d => d.data.name)
            .style('font-weight', d => (isSearchedProblemPresent(d.data.name, d.parent?.data?.name) && (d.depth > 1)) ? 'bold' : 'unset')
            .style('text-shadow', d => (isSearchedProblemPresent(d.data.name, d.parent?.data?.name)  && (d.depth > 1)) ? '0px 0px 10px #ff555f' : 'unset')

        }
    }

    const isSearchedProblemPresent = (problemName, parentName) => {
        const parentItem = treeData.children?.filter((item) => {
            return item.name === parentName;
        });
        let updatedString = '';
        if (parentItem.length > 0) {
            updatedString = `${treeData.name} ${parentItem[0].name}`;
            parentItem[0].children?.forEach((item) => {
                if (item.name === problemName) {
                    updatedString = `${updatedString} ${item?.name}`;
                    item?.keyWords?.forEach((keyWord) => {
                        updatedString = `${updatedString} ${keyWord}`;
                    });
                }
            });
        }
        const searchedItems = searchedProblemsList.filter((searchedKeyword) => {
            return updatedString.toLowerCase().includes(searchedKeyword.toLowerCase())
        })
        if (searchedItems.length > 0) {
            return true
        } else {
            return false;
        }
    };

    // Helper function to project points on the circle
    const project = (x, y) => {
        const angle = (x - 90) / 180 * Math.PI;
        return [y * Math.cos(angle), y * Math.sin(angle)];
    };

    const updateSelectedItem = (problemName) => {
        if (problemName) {
            setShowKeywordDialog(true);
            setSelectedProblemList(prev => [...prev, problemName]);
        }
    }

    const removeSelectedItem = (problemName) => {
        const updatedSelectedProblemList: string[] = selectedProblemList.filter(item => item !== problemName);
        setSelectedProblemList(updatedSelectedProblemList);
        setShowKeywordDialog(true)
    }

    const isProblemPresent = (problemName) => selectedProblemList.includes(problemName);

    return (
        <div className="problem-list-outer-container">
            <KeywordSearch getSearchedProblemList={(problemsList) => setSearchedProblemsList(problemsList)}/>
            <h1 className="problem-list-heading">{treeData && treeData.name}</h1>
            <div className="problem-List-container">
                <svg ref={svgRef} />
                {showKeywordDialog && <div className="keyword-dialog-parent-container">
                    <KeywordDialog
                        selectedProblemList={selectedProblemList}
                        onClose={() => setShowKeywordDialog(false)}
                        removeSelectedItem={(problemName) => removeSelectedItem(problemName)}
                        onProgress={() => selectData('problemList', selectedProblemList)}
                    />
                </div>}
                <div
                    id="actionTooltip"
                    onMouseOver={() => d3.select("#actionTooltip").style("display", 'flex')}
                    onMouseLeave={() => d3.select("#actionTooltip").style("display", 'none')}
                    className="action-tooltip-container"
                    style={{ top: actionTooltipYaxis, left: actionTooltipXaxis }}
                >
                    <div
                        style={{color: isProblemPresent(selectedProblem) ? 'rgba(0, 0, 0, 0.23)' : 'black'}} 
                        onClick={() => (!isProblemPresent(selectedProblem) && updateSelectedItem(selectedProblem))}
                    >
                        <ControlPointOutlinedIcon />
                    <p>Add</p>
                    </div>
                    <div
                        style={{color: !isProblemPresent(selectedProblem) ? 'rgba(0, 0, 0, 0.23)' : 'black'}}
                        onClick={() => (isProblemPresent(selectedProblem) && removeSelectedItem(selectedProblem))}
                    >
                        <RemoveCircleOutlineOutlinedIcon />
                        <p>Remove</p>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default ProblemList;





----------------------------------------------------------------------------------------------------------------------------------------------

CSS
.problem-list-outer-container {
  padding: 20px;
}

.problem-List-container {
    position: relative;
    
}

.problem-list-heading {
  margin-top: 20px;
  text-align: center;
  font-size: 22px;
  font-weight: 500;
  color: #073262;
}

 /*.problem-List-container .svg-container {
    animation-duration: 100s;
    animation-iteration-count: infinite;
    //animation-name: clockwiseSpin;
    animation-timing-function: linear;
    
}

@keyframes clockwiseSpin {
    from  {
      transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }	
} */

.problem-List-container svg image {
  width: 80px;
  height: 80px;
  transform: rotate(277.5deg);
  border-radius: 20px;
  z-index: 1;
}

.check {
    display: inline-block;
    transform: rotate(45deg);
    height: 6px;
    width: 8px;
    border-bottom: 5px solid #78b13f;
    border-right: 5px solid #78b13f
}

.problem-List-container svg text#chk {
    fill: #00f;
  
}

.keyword-dialog-parent-container {
  position: absolute;
  top: 20px;
  right: 20px;
}

.action-tooltip-container {
  display: none;
  position: absolute;
  border: 2px solid #fba265;
  background: white;
  border-radius: 5px;
  padding: 5px;
  top: 0;
  left: 0;
  column-gap: 8px;
}

.action-tooltip-container div {
  display: flex;
  column-gap: 8px;
  align-items: center;
  cursor: pointer;
}

.action-tooltip-container div svg,
.action-tooltip-container div p {
  font-size: 10px;
}

----------------------------------chatgpt-----------------------------------------------------------------------------------
nodes.selectAll('text').each(function (d, i) {
    const textNode = d3.select(this[i]); // Access the DOM element directly using the index 'i'
    const text = textNode.text();
    const maxWidth = 100; // Set the maximum width for the text

    if (textNode.node().getComputedTextLength() > maxWidth) {
      textNode.text(''); // Clear the original text

      let truncatedText = text;
      while (textNode.node().getComputedTextLength() > maxWidth) {
        truncatedText = truncatedText.slice(0, -1); // Remove one character at a time
        textNode.text(truncatedText + '...');
      }

      textNode.append('tspan').attr('x', 0).attr('y', 0).text(truncatedText);
    }
  });
